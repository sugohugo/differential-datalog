diff --git a/rust/template/distributed_datalog/src/instantiate.rs b/rust/template/distributed_datalog/src/instantiate.rs
index 2bffa67..9caa42b 100644
--- a/test/datalog_tests/dbpedia_ownership_ddlog/distributed_datalog/src/instantiate.rs
+++ b/test/datalog_tests/dbpedia_ownership_ddlog/distributed_datalog/src/instantiate.rs
@@ -133,21 +133,14 @@ fn add_tcp_senders<P>(
                     let sender = Arc::new(Mutex::new(sender));
 
                     // TODO: What should we really do if we can't subscribe?
-                    let accumulator = accumulators.entry(rel_ids.clone())
-                        .or_insert(Arc::new(Mutex::new(DistributingAccumulator::new())));
-
-                    let subscription = accumulator.lock().unwrap()
-                        .subscribe(Box::new(sender.clone()))
-                        .map_err(|_| "failed to subscribe TCP sender".to_string())?;
-
                     sinks.entry(rel_ids.clone())
                         .or_insert(vec!())
-                        .insert(0, (SinkRealization::Node(sender.clone()), subscription));
+                        .insert(0, (SinkRealization::Node(sender.clone()), 0));
 
                     server
                         .add_stream(rel_ids)
-                        .subscribe(Box::new(accumulator.clone()))
-                        .map_err(|_| "failed to subscribe accumulator".to_string())
+                        .subscribe(Box::new(sender.clone()))
+                        .map_err(|_| "failed to subscribe TcpSender".to_string())
                 }
             }
         })
@@ -220,25 +213,13 @@ fn add_file_sinks<P>(
                 .map_err(|e| format!("failed to create file {}: {}", path.display(), e))?;
             let sink = Arc::new(Mutex::new(FileSink::<P::Convert>::new(file)));
 
-            let accumulator = accumulators.entry(rel_ids.clone())
-                .or_insert(Arc::new(Mutex::new(DistributingAccumulator::new())));
-
-            let subscription = accumulator.lock().unwrap()
-                .subscribe(Box::new(sink.clone()))
-                .map_err(|_| {
-                    format!(
-                        "failed to subscribe file sink {} to accumulator",
-                        path.display()
-                    )
-                })?;
-
             let _ = sinks.entry(rel_ids.clone())
                 .or_insert(vec!())
-                .insert(0, (SinkRealization::File(sink), subscription));
+                .insert(0, (SinkRealization::File(sink.clone()), 0));
 
             server.add_stream(rel_ids.clone())
-                .subscribe(Box::new(accumulator.clone()))
-                .map_err(|_| "failed to subscribe accumulator to DDlogServer".to_string())
+                .subscribe(Box::new(sink))
+                .map_err(|_| "failed to subscribe FileSink to TxnMux".to_string())
         })
 }
 
@@ -258,17 +239,13 @@ fn add_file_sources<P>(
         .try_for_each(|(path, rel_ids)| {
             let mut source = Arc::new(Mutex::new(FileSource::<P::Convert>::new(path)));
 
-            let accumulator = Arc::new(Mutex::new(DistributingAccumulator::new()));
             txnmux
-                .add_observable(Box::new(accumulator.clone()))
+                .add_observable(Box::new(source.clone()))
                 .map_err(|_| "failed to register Accumulator with TxnMux".to_string())?;
 
-            let subscription = source.subscribe(Box::new(accumulator))
-                .map_err(|_| format!("failed to add file source {} to accumulator", path.display()))?;
-
             sources.entry(rel_ids.clone())
                 .or_insert(vec!())
-                .insert(0, (SourceRealization::File(source), subscription));
+                .insert(0, (SourceRealization::File(source), ()));
             Ok(())
         })
 }
