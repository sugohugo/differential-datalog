diff --git ip_discovery_agent.dl ip_discovery_agent.dl
index 3334f6..39338c 100644
--- ip_discovery_agent.dl
+++ ip_discovery_agent.dl
@@ -3,11 +3,6 @@ import ip_discovery_common
 /* Local agent.
  */
 
-/* Per-LSP configuration received from central controller. */
-input relation LSPConfig(
-  lsp: lspid_t, // LSP identifier.
-  tofu: bool)   // trust-on-first-use flag.
-
 /* IP addresses claimed by VMs connected to local LSPs,
  * obtained using address snooping. */
 input relation SnoopedAddress(
@@ -15,21 +10,6 @@ input relation SnoopedAddress(
   ip: ipaddr_t,      // Snooped address.
   timestamp: time_t) // Time address was first claimed.
 
-/* Unique IP address per LSP selected from SnoopedAddress
- * based on LSP's tofu flag. */
-output relation RealizedAddress(
-  lsp: lspid_t,
-  timestamp: time_t,
-  ip: ipaddr_t)
-
-/* No TOFU: use the most recent IP. */
-RealizedAddress(lsp, newest.0, newest.1) :-
-  LSPConfig(.lsp = lsp, .tofu = false),
-  SnoopedAddress(lsp, ip, ts),
-  var newest = Aggregate((lsp), group_max((ts, ip))).
+output relation OutSnoopedAddress(lsp: lspid_t, ip: ipaddr_t, timestamp: time_t)
 
-/* TOFU: Use the oldest IP. */
-RealizedAddress(lsp, oldest.0, oldest.1) :-
-  LSPConfig(.lsp = lsp, .tofu = true),
-  SnoopedAddress(lsp, ip, ts),
-  var oldest = Aggregate((lsp), group_min((ts, ip))).
+OutSnoopedAddress(lsp, ip, timestamp) :- SnoopedAddress(lsp, ip, timestamp).
diff --git ip_discovery_controller.dl ip_discovery_controller.dl
index ccd701..2d71c5 100644
--- ip_discovery_controller.dl
+++ ip_discovery_controller.dl
@@ -3,18 +3,17 @@ import ip_discovery_common
 /* Central controller.
  */
 
-/* LSP-to-IP mappings collected by local agents. */
-input relation RealizedAddress(
-  lsp: lspid_t,
-  timestamp: time_t,
-  ip: ipaddr_t)
-
 /* User-supplied LSP configuration. */
 input relation LogicalSwitchPort(
   id: lspid_t, // LSP id.
   ls: lsid_t,  // Logical switch this LSP belongs to.
   tofu: bool)  // tofu flag.
 
+input relation SnoopedAddress(
+  lsp: lspid_t,      // LSP claiming the address.
+  ip: ipaddr_t,      // Snooped address.
+  timestamp: time_t) // Time address was first claimed.
+
 /* LSP configuration distributed to local agents
  * (only contains fields relevant to IP discovery). */
 output relation LSPConfig(
@@ -22,6 +21,25 @@ output relation LSPConfig(
 
 LSPConfig(lsp, tofu) :- LogicalSwitchPort(lsp, _, tofu).
 
+/* Unique IP address per LSP selected from SnoopedAddress
+ * based on LSP's tofu flag. */
+output relation RealizedAddress(
+  lsp: lspid_t,
+  timestamp: time_t,
+  ip: ipaddr_t)
+
+/* No TOFU: use the most recent IP. */
+RealizedAddress(lsp, newest.0, newest.1) :-
+  LSPConfig(.lsp = lsp, .tofu = false),
+  SnoopedAddress(lsp, ip, ts),
+  var newest = Aggregate((lsp), group_max((ts, ip))).
+
+/* TOFU: Use the oldest IP. */
+RealizedAddress(lsp, oldest.0, oldest.1) :-
+  LSPConfig(.lsp = lsp, .tofu = true),
+  SnoopedAddress(lsp, ip, ts),
+  var oldest = Aggregate((lsp), group_min((ts, ip))).
+
 /* LSP-to-IP mappings from RealizedAddress with duplicates eliminated. */
 output relation EffectiveAddress(lsp: lspid_t, ip: ipaddr_t)
 
diff --git ip_discovery/src/main.rs ip_discovery/src/main.rs
index 4e3a2c..c9b622 100644
--- ip_discovery/src/main.rs
+++ ip_discovery/src/main.rs
@@ -19,13 +19,12 @@ use distributed_datalog::Source;
 use distributed_datalog::SysCfg;
 
 use ip_discovery_ddlog::api::HDDlog;
-use ip_discovery_ddlog::Relations::agent_LSPConfig;
-use ip_discovery_ddlog::Relations::agent_RealizedAddress;
+use ip_discovery_ddlog::Relations::agent_OutSnoopedAddress;
 use ip_discovery_ddlog::Relations::agent_SnoopedAddress;
 use ip_discovery_ddlog::Relations::controller_EffectiveAddress;
-use ip_discovery_ddlog::Relations::controller_LSPConfig;
 use ip_discovery_ddlog::Relations::controller_LogicalSwitchPort;
 use ip_discovery_ddlog::Relations::controller_RealizedAddress;
+use ip_discovery_ddlog::Relations::controller_SnoopedAddress;
 
 #[derive(StructOpt, Debug)]
 #[structopt(name = "ip_discovery")]
@@ -51,6 +50,10 @@ enum Opts {
             parse(from_os_str)
         )]
         effective_data: PathBuf,
+        /// The path to the output file containing `RealizedAddress`
+        /// transactions.
+        #[structopt(long = "realized", default_value = "realized.dump", parse(from_os_str))]
+        realized_data: PathBuf,
     },
     /// Instantiate an agent.
     #[structopt(name = "agent")]
@@ -65,10 +68,6 @@ enum Opts {
         /// transactions.
         #[structopt(long = "snooped", parse(from_os_str))]
         snooped_data: PathBuf,
-        /// The path to the output file containing `RealizedAddress`
-        /// transactions.
-        #[structopt(long = "realized", default_value = "realized.dump", parse(from_os_str))]
-        realized_data: PathBuf,
     },
 }
 
@@ -88,27 +87,23 @@ fn config(
         controller_LogicalSwitchPort as usize => btreeset!{
             RelCfg::Source(Source::File(lsp_data.to_path_buf())),
         },
-        controller_LSPConfig as usize => btreeset!{
-            RelCfg::Output(agent_id.clone(), agent_LSPConfig as usize),
-        },
         controller_EffectiveAddress as usize => btreeset!{
             RelCfg::Sink(Sink::File(effective_address.to_path_buf())),
         },
         controller_RealizedAddress as usize => btreeset!{
-            RelCfg::Input(agent_RealizedAddress as usize),
+            RelCfg::Sink(Sink::File(realized_address.to_path_buf())),
+        },
+        controller_SnoopedAddress as usize => btreeset!{
+            RelCfg::Input(agent_OutSnoopedAddress as usize),
         },
     };
     let agent_cfg = btreemap! {
-        agent_LSPConfig as usize => btreeset!{
-            RelCfg::Input(controller_LSPConfig as usize),
-        },
-        agent_RealizedAddress as usize => btreeset!{
-            RelCfg::Output(ctrl_id.clone(), controller_RealizedAddress as usize),
-            RelCfg::Sink(Sink::File(realized_address.to_path_buf())),
-        },
         agent_SnoopedAddress as usize => btreeset!{
             RelCfg::Source(Source::File(snooped_address.to_path_buf())),
         },
+        agent_OutSnoopedAddress as usize => btreeset!{
+            RelCfg::Output(ctrl_id.clone(), controller_SnoopedAddress as usize),
+        },
     };
 
     let sys_cfg = btreemap! {
@@ -166,19 +161,19 @@ fn main() -> Result<(), String> {
             members,
             lsp_data,
             effective_data,
-        } => realize(member, members, &lsp_data, &empty, &effective_data, &empty),
+            realized_data,
+        } => realize(member, members, &lsp_data, &empty, &effective_data, &realized_data),
         Opts::Agent {
             member,
             members,
             snooped_data,
-            realized_data,
         } => realize(
             member,
             members,
             &empty,
             &snooped_data,
             &empty,
-            &realized_data,
+            &empty,
         ),
     }
 }
diff --git ip_discovery_ddlog/ip_discovery.dot ip_discovery_ddlog/ip_discovery.dot
index ae03c8..09072f 100644
--- ip_discovery_ddlog/ip_discovery.dot
+++ ip_discovery_ddlog/ip_discovery.dot
@@ -1,16 +1,17 @@
 digraph {
-    0 [label="agent.LSPConfig"];
-    1 [label="agent.RealizedAddress"];
-    2 [label="agent.SnoopedAddress"];
-    3 [label="controller.EffectiveAddress"];
-    4 [label="controller.LSPConfig"];
-    5 [label="controller.LogicalSwitchPort"];
-    6 [label="controller.RealizedAddress"];
-    0 -> 1;
-    0 -> 1;
-    2 -> 1;
-    2 -> 1;
-    5 -> 3;
-    5 -> 4;
-    6 -> 3;
+    0 [label="agent.OutSnoopedAddress"];
+    1 [label="agent.SnoopedAddress"];
+    2 [label="controller.EffectiveAddress"];
+    3 [label="controller.LSPConfig"];
+    4 [label="controller.LogicalSwitchPort"];
+    5 [label="controller.RealizedAddress"];
+    6 [label="controller.SnoopedAddress"];
+    1 -> 0;
+    3 -> 5;
+    3 -> 5;
+    4 -> 2;
+    4 -> 3;
+    5 -> 2;
+    6 -> 5;
+    6 -> 5;
 }
\ No newline at end of file
diff --git ip_discovery_ddlog/src/lib.rs ip_discovery_ddlog/src/lib.rs
index 03d706..0534cf 100644
--- ip_discovery_ddlog/src/lib.rs
+++ ip_discovery_ddlog/src/lib.rs
@@ -1258,28 +1258,29 @@ mod __log {
     }
 }
 #[derive(Eq, Ord, Clone, Hash, PartialEq, PartialOrd, Serialize, Deserialize, Default)]
-pub struct agent_LSPConfig {
+pub struct agent_OutSnoopedAddress {
     lsp: common_lspid_t,
-    tofu: bool
+    ip: common_ipaddr_t,
+    timestamp: common_time_t
 }
-impl abomonation::Abomonation for agent_LSPConfig{}
-impl <> record::FromRecord for agent_LSPConfig<> {
+impl abomonation::Abomonation for agent_OutSnoopedAddress{}
+impl <> record::FromRecord for agent_OutSnoopedAddress<> {
     fn from_record(val: &record::Record) -> result::Result<Self, String> {
         match val {
             record::Record::PosStruct(constr, _args) => {
                 match constr.as_ref() {
-                    "agent.LSPConfig" if _args.len() == 2 => {
-                        Ok(agent_LSPConfig{lsp: <common_lspid_t>::from_record(&_args[0])?, tofu: <bool>::from_record(&_args[1])?})
+                    "agent.OutSnoopedAddress" if _args.len() == 3 => {
+                        Ok(agent_OutSnoopedAddress{lsp: <common_lspid_t>::from_record(&_args[0])?, ip: <common_ipaddr_t>::from_record(&_args[1])?, timestamp: <common_time_t>::from_record(&_args[2])?})
                     },
-                    c => result::Result::Err(format!("unknown constructor {} of type agent_LSPConfig in {:?}", c, *val))
+                    c => result::Result::Err(format!("unknown constructor {} of type agent_OutSnoopedAddress in {:?}", c, *val))
                 }
             },
             record::Record::NamedStruct(constr, _args) => {
                 match constr.as_ref() {
-                    "agent.LSPConfig" => {
-                        Ok(agent_LSPConfig{lsp: record::arg_extract::<common_lspid_t>(_args, "lsp")?, tofu: record::arg_extract::<bool>(_args, "tofu")?})
+                    "agent.OutSnoopedAddress" => {
+                        Ok(agent_OutSnoopedAddress{lsp: record::arg_extract::<common_lspid_t>(_args, "lsp")?, ip: record::arg_extract::<common_ipaddr_t>(_args, "ip")?, timestamp: record::arg_extract::<common_time_t>(_args, "timestamp")?})
                     },
-                    c => result::Result::Err(format!("unknown constructor {} of type agent_LSPConfig in {:?}", c, *val))
+                    c => result::Result::Err(format!("unknown constructor {} of type agent_OutSnoopedAddress in {:?}", c, *val))
                 }
             },
             v => {
@@ -1288,76 +1289,24 @@ impl <> record::FromRecord for agent_LSPConfig<> {
         }
     }
 }
-decl_struct_into_record!(agent_LSPConfig, <>, lsp, tofu);
-decl_record_mutator_struct!(agent_LSPConfig, <>, lsp: common_lspid_t, tofu: bool);
-impl fmt::Display for agent_LSPConfig {
+decl_struct_into_record!(agent_OutSnoopedAddress, <>, lsp, ip, timestamp);
+decl_record_mutator_struct!(agent_OutSnoopedAddress, <>, lsp: common_lspid_t, ip: common_ipaddr_t, timestamp: common_time_t);
+impl fmt::Display for agent_OutSnoopedAddress {
     fn fmt(&self, __formatter: &mut fmt::Formatter) -> fmt::Result {
         match self {
-            agent_LSPConfig{lsp,tofu} => {
-                __formatter.write_str("agent.LSPConfig{")?;
+            agent_OutSnoopedAddress{lsp,ip,timestamp} => {
+                __formatter.write_str("agent.OutSnoopedAddress{")?;
                 fmt::Debug::fmt(lsp, __formatter)?;
                 __formatter.write_str(",")?;
-                fmt::Debug::fmt(tofu, __formatter)?;
-                __formatter.write_str("}")
-            }
-        }
-    }
-}
-impl fmt::Debug for agent_LSPConfig {
-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
-        fmt::Display::fmt(&self, f)
-    }
-}
-#[derive(Eq, Ord, Clone, Hash, PartialEq, PartialOrd, Serialize, Deserialize, Default)]
-pub struct agent_RealizedAddress {
-    lsp: common_lspid_t,
-    timestamp: common_time_t,
-    ip: common_ipaddr_t
-}
-impl abomonation::Abomonation for agent_RealizedAddress{}
-impl <> record::FromRecord for agent_RealizedAddress<> {
-    fn from_record(val: &record::Record) -> result::Result<Self, String> {
-        match val {
-            record::Record::PosStruct(constr, _args) => {
-                match constr.as_ref() {
-                    "agent.RealizedAddress" if _args.len() == 3 => {
-                        Ok(agent_RealizedAddress{lsp: <common_lspid_t>::from_record(&_args[0])?, timestamp: <common_time_t>::from_record(&_args[1])?, ip: <common_ipaddr_t>::from_record(&_args[2])?})
-                    },
-                    c => result::Result::Err(format!("unknown constructor {} of type agent_RealizedAddress in {:?}", c, *val))
-                }
-            },
-            record::Record::NamedStruct(constr, _args) => {
-                match constr.as_ref() {
-                    "agent.RealizedAddress" => {
-                        Ok(agent_RealizedAddress{lsp: record::arg_extract::<common_lspid_t>(_args, "lsp")?, timestamp: record::arg_extract::<common_time_t>(_args, "timestamp")?, ip: record::arg_extract::<common_ipaddr_t>(_args, "ip")?})
-                    },
-                    c => result::Result::Err(format!("unknown constructor {} of type agent_RealizedAddress in {:?}", c, *val))
-                }
-            },
-            v => {
-                result::Result::Err(format!("not a struct {:?}", *v))
-            }
-        }
-    }
-}
-decl_struct_into_record!(agent_RealizedAddress, <>, lsp, timestamp, ip);
-decl_record_mutator_struct!(agent_RealizedAddress, <>, lsp: common_lspid_t, timestamp: common_time_t, ip: common_ipaddr_t);
-impl fmt::Display for agent_RealizedAddress {
-    fn fmt(&self, __formatter: &mut fmt::Formatter) -> fmt::Result {
-        match self {
-            agent_RealizedAddress{lsp,timestamp,ip} => {
-                __formatter.write_str("agent.RealizedAddress{")?;
-                fmt::Debug::fmt(lsp, __formatter)?;
+                record::format_ddlog_str(ip, __formatter)?;
                 __formatter.write_str(",")?;
                 fmt::Debug::fmt(timestamp, __formatter)?;
-                __formatter.write_str(",")?;
-                record::format_ddlog_str(ip, __formatter)?;
                 __formatter.write_str("}")
             }
         }

 }
-impl fmt::Debug for agent_RealizedAddress {
+impl fmt::Debug for agent_OutSnoopedAddress {
     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
         fmt::Display::fmt(&self, f)
     }
@@ -1630,6 +1579,60 @@ impl fmt::Debug for controller_RealizedAddress {
         fmt::Display::fmt(&self, f)
     }
 }
+#[derive(Eq, Ord, Clone, Hash, PartialEq, PartialOrd, Serialize, Deserialize, Default)]
+pub struct controller_SnoopedAddress {
+    lsp: common_lspid_t,
+    ip: common_ipaddr_t,
+    timestamp: common_time_t
+}
+impl abomonation::Abomonation for controller_SnoopedAddress{}
+impl <> record::FromRecord for controller_SnoopedAddress<> {
+    fn from_record(val: &record::Record) -> result::Result<Self, String> {
+        match val {
+            record::Record::PosStruct(constr, _args) => {
+                match constr.as_ref() {
+                    "controller.SnoopedAddress" if _args.len() == 3 => {
+                        Ok(controller_SnoopedAddress{lsp: <common_lspid_t>::from_record(&_args[0])?, ip: <common_ipaddr_t>::from_record(&_args[1])?, timestamp: <common_time_t>::from_record(&_args[2])?})
+                    },
+                    c => result::Result::Err(format!("unknown constructor {} of type controller_SnoopedAddress in {:?}", c, *val))
+                }
+            },
+            record::Record::NamedStruct(constr, _args) => {
+                match constr.as_ref() {
+                    "controller.SnoopedAddress" => {
+                        Ok(controller_SnoopedAddress{lsp: record::arg_extract::<common_lspid_t>(_args, "lsp")?, ip: record::arg_extract::<common_ipaddr_t>(_args, "ip")?, timestamp: record::arg_extract::<common_time_t>(_args, "timestamp")?})
+                    },
+                    c => result::Result::Err(format!("unknown constructor {} of type controller_SnoopedAddress in {:?}", c, *val))
+                }
+            },
+            v => {
+                result::Result::Err(format!("not a struct {:?}", *v))
+            }
+        }
+    }
+}
+decl_struct_into_record!(controller_SnoopedAddress, <>, lsp, ip, timestamp);
+decl_record_mutator_struct!(controller_SnoopedAddress, <>, lsp: common_lspid_t, ip: common_ipaddr_t, timestamp: common_time_t);
+impl fmt::Display for controller_SnoopedAddress {
+    fn fmt(&self, __formatter: &mut fmt::Formatter) -> fmt::Result {
+        match self {
+            controller_SnoopedAddress{lsp,ip,timestamp} => {
+                __formatter.write_str("controller.SnoopedAddress{")?;
+                fmt::Debug::fmt(lsp, __formatter)?;
+                __formatter.write_str(",")?;
+                record::format_ddlog_str(ip, __formatter)?;
+                __formatter.write_str(",")?;
+                fmt::Debug::fmt(timestamp, __formatter)?;
+                __formatter.write_str("}")
+            }
+        }
+    }
+}
+impl fmt::Debug for controller_SnoopedAddress {
+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
+        fmt::Display::fmt(&self, f)
+    }
+}
 pub type log_log_level_t = i32;
 pub type log_module_t = i32;
 #[derive(Eq, Ord, Clone, Hash, PartialEq, PartialOrd, Serialize, Deserialize)]
@@ -1772,13 +1775,13 @@ impl TryFrom<&str> for Relations {
     fn try_from(rname: &str) -> result::Result<Self, Self::Error> {
          match rname {
         "__Null" => Ok(Relations::__Null),
-        "agent.LSPConfig" => Ok(Relations::agent_LSPConfig),
-        "agent.RealizedAddress" => Ok(Relations::agent_RealizedAddress),
+        "agent.OutSnoopedAddress" => Ok(Relations::agent_OutSnoopedAddress),
         "agent.SnoopedAddress" => Ok(Relations::agent_SnoopedAddress),
         "controller.EffectiveAddress" => Ok(Relations::controller_EffectiveAddress),
         "controller.LSPConfig" => Ok(Relations::controller_LSPConfig),
         "controller.LogicalSwitchPort" => Ok(Relations::controller_LogicalSwitchPort),
         "controller.RealizedAddress" => Ok(Relations::controller_RealizedAddress),
+        "controller.SnoopedAddress" => Ok(Relations::controller_SnoopedAddress),
              _  => Err(())
          }
     }
@@ -1786,9 +1789,10 @@ impl TryFrom<&str> for Relations {
 impl Relations {
     pub fn is_output(&self) -> bool {
         match self {
-        Relations::agent_RealizedAddress => true,
+        Relations::agent_OutSnoopedAddress => true,
         Relations::controller_EffectiveAddress => true,
         Relations::controller_LSPConfig => true,
+        Relations::controller_RealizedAddress => true,
             _  => false
         }
     }
@@ -1796,10 +1800,9 @@ impl Relations {
 impl Relations {
     pub fn is_input(&self) -> bool {
         match self {
-        Relations::agent_LSPConfig => true,
         Relations::agent_SnoopedAddress => true,
         Relations::controller_LogicalSwitchPort => true,
-        Relations::controller_RealizedAddress => true,
+        Relations::controller_SnoopedAddress => true,
             _  => false
         }
     }
@@ -1809,13 +1812,13 @@ impl TryFrom<RelId> for Relations {
     fn try_from(rid: RelId) -> result::Result<Self, Self::Error> {
          match rid {
         0 => Ok(Relations::__Null),
-        1 => Ok(Relations::agent_LSPConfig),
-        2 => Ok(Relations::agent_RealizedAddress),
-        3 => Ok(Relations::agent_SnoopedAddress),
-        4 => Ok(Relations::controller_EffectiveAddress),
-        5 => Ok(Relations::controller_LSPConfig),
-        6 => Ok(Relations::controller_LogicalSwitchPort),
-        7 => Ok(Relations::controller_RealizedAddress),
+        1 => Ok(Relations::agent_OutSnoopedAddress),
+        2 => Ok(Relations::agent_SnoopedAddress),
+        3 => Ok(Relations::controller_EffectiveAddress),
+        4 => Ok(Relations::controller_LSPConfig),
+        5 => Ok(Relations::controller_LogicalSwitchPort),
+        6 => Ok(Relations::controller_RealizedAddress),
+        7 => Ok(Relations::controller_SnoopedAddress),
              _  => Err(())
          }
     }
@@ -1823,13 +1826,13 @@ impl TryFrom<RelId> for Relations {
 pub fn relid2name(rid: RelId) -> Option<&'static str> {
    match rid {
         0 => Some(&"__Null"),
-        1 => Some(&"agent.LSPConfig"),
-        2 => Some(&"agent.RealizedAddress"),
-        3 => Some(&"agent.SnoopedAddress"),
-        4 => Some(&"controller.EffectiveAddress"),
-        5 => Some(&"controller.LSPConfig"),
-        6 => Some(&"controller.LogicalSwitchPort"),
-        7 => Some(&"controller.RealizedAddress"),
+        1 => Some(&"agent.OutSnoopedAddress"),
+        2 => Some(&"agent.SnoopedAddress"),
+        3 => Some(&"controller.EffectiveAddress"),
+        4 => Some(&"controller.LSPConfig"),
+        5 => Some(&"controller.LogicalSwitchPort"),
+        6 => Some(&"controller.RealizedAddress"),
+        7 => Some(&"controller.SnoopedAddress"),
        _  => None
    }
 }
@@ -1840,13 +1843,13 @@ lazy_static! {
     pub static ref RELIDMAP: FnvHashMap<Relations, &'static str> = {
         let mut m = FnvHashMap::default();
         m.insert(Relations::__Null, "__Null");
-        m.insert(Relations::agent_LSPConfig, "agent.LSPConfig");
-        m.insert(Relations::agent_RealizedAddress, "agent.RealizedAddress");
+        m.insert(Relations::agent_OutSnoopedAddress, "agent.OutSnoopedAddress");
         m.insert(Relations::agent_SnoopedAddress, "agent.SnoopedAddress");
         m.insert(Relations::controller_EffectiveAddress, "controller.EffectiveAddress");
         m.insert(Relations::controller_LSPConfig, "controller.LSPConfig");
         m.insert(Relations::controller_LogicalSwitchPort, "controller.LogicalSwitchPort");
         m.insert(Relations::controller_RealizedAddress, "controller.RealizedAddress");
+        m.insert(Relations::controller_SnoopedAddress, "controller.SnoopedAddress");
         m
    };
 }
@@ -1854,32 +1857,32 @@ lazy_static! {
     pub static ref RELIDMAPC: FnvHashMap<RelId, ffi::CString> = {
         let mut m = FnvHashMap::default();
         m.insert(0, ffi::CString::new("__Null").unwrap_or_else(|_|ffi::CString::new(r"Cannot convert relation name to C string").unwrap()));
-        m.insert(1, ffi::CString::new("agent.LSPConfig").unwrap_or_else(|_|ffi::CString::new(r"Cannot convert relation name to C string").unwrap()));
-        m.insert(2, ffi::CString::new("agent.RealizedAddress").unwrap_or_else(|_|ffi::CString::new(r"Cannot convert relation name to C string").unwrap()));
-        m.insert(3, ffi::CString::new("agent.SnoopedAddress").unwrap_or_else(|_|ffi::CString::new(r"Cannot convert relation name to C string").unwrap()));
-        m.insert(4, ffi::CString::new("controller.EffectiveAddress").unwrap_or_else(|_|ffi::CString::new(r"Cannot convert relation name to C string").unwrap()));
-        m.insert(5, ffi::CString::new("controller.LSPConfig").unwrap_or_else(|_|ffi::CString::new(r"Cannot convert relation name to C string").unwrap()));
-        m.insert(6, ffi::CString::new("controller.LogicalSwitchPort").unwrap_or_else(|_|ffi::CString::new(r"Cannot convert relation name to C string").unwrap()));
-        m.insert(7, ffi::CString::new("controller.RealizedAddress").unwrap_or_else(|_|ffi::CString::new(r"Cannot convert relation name to C string").unwrap()));
+        m.insert(1, ffi::CString::new("agent.OutSnoopedAddress").unwrap_or_else(|_|ffi::CString::new(r"Cannot convert relation name to C string").unwrap()));
+        m.insert(2, ffi::CString::new("agent.SnoopedAddress").unwrap_or_else(|_|ffi::CString::new(r"Cannot convert relation name to C string").unwrap()));
+        m.insert(3, ffi::CString::new("controller.EffectiveAddress").unwrap_or_else(|_|ffi::CString::new(r"Cannot convert relation name to C string").unwrap()));
+        m.insert(4, ffi::CString::new("controller.LSPConfig").unwrap_or_else(|_|ffi::CString::new(r"Cannot convert relation name to C string").unwrap()));
+        m.insert(5, ffi::CString::new("controller.LogicalSwitchPort").unwrap_or_else(|_|ffi::CString::new(r"Cannot convert relation name to C string").unwrap()));
+        m.insert(6, ffi::CString::new("controller.RealizedAddress").unwrap_or_else(|_|ffi::CString::new(r"Cannot convert relation name to C string").unwrap()));
+        m.insert(7, ffi::CString::new("controller.SnoopedAddress").unwrap_or_else(|_|ffi::CString::new(r"Cannot convert relation name to C string").unwrap()));
         m
    };
 }
 lazy_static! {
     pub static ref INPUT_RELIDMAP: FnvHashMap<Relations, &'static str> = {
         let mut m = FnvHashMap::default();
-        m.insert(Relations::agent_LSPConfig, "agent.LSPConfig");
         m.insert(Relations::agent_SnoopedAddress, "agent.SnoopedAddress");
         m.insert(Relations::controller_LogicalSwitchPort, "controller.LogicalSwitchPort");
-        m.insert(Relations::controller_RealizedAddress, "controller.RealizedAddress");
+        m.insert(Relations::controller_SnoopedAddress, "controller.SnoopedAddress");
         m
     };
 }
 lazy_static! {
     pub static ref OUTPUT_RELIDMAP: FnvHashMap<Relations, &'static str> = {
         let mut m = FnvHashMap::default();
-        m.insert(Relations::agent_RealizedAddress, "agent.RealizedAddress");
+        m.insert(Relations::agent_OutSnoopedAddress, "agent.OutSnoopedAddress");
         m.insert(Relations::controller_EffectiveAddress, "controller.EffectiveAddress");
         m.insert(Relations::controller_LSPConfig, "controller.LSPConfig");
+        m.insert(Relations::controller_RealizedAddress, "controller.RealizedAddress");
         m
     };
 }
@@ -1929,11 +1932,8 @@ pub fn relval_from_record(rel: Relations, _rec: &record::Record) -> result::Resu
         Relations::__Null => {
             Ok(Value::__Tuple0__(<()>::from_record(_rec)?).into_ddvalue())
         },
-        Relations::agent_LSPConfig => {
-            Ok(Value::__agent_LSPConfig(<agent_LSPConfig>::from_record(_rec)?).into_ddvalue())
-        },
-        Relations::agent_RealizedAddress => {
-            Ok(Value::__agent_RealizedAddress(<agent_RealizedAddress>::from_record(_rec)?).into_ddvalue())
+        Relations::agent_OutSnoopedAddress => {
+            Ok(Value::__agent_OutSnoopedAddress(<agent_OutSnoopedAddress>::from_record(_rec)?).into_ddvalue())
         },
         Relations::agent_SnoopedAddress => {
             Ok(Value::__agent_SnoopedAddress(<agent_SnoopedAddress>::from_record(_rec)?).into_ddvalue())
@@ -1949,6 +1949,9 @@ pub fn relval_from_record(rel: Relations, _rec: &record::Record) -> result::Resu
         },
         Relations::controller_RealizedAddress => {
             Ok(Value::__controller_RealizedAddress(<controller_RealizedAddress>::from_record(_rec)?).into_ddvalue())
+        },
+        Relations::controller_SnoopedAddress => {
+            Ok(Value::__controller_SnoopedAddress(<controller_SnoopedAddress>::from_record(_rec)?).into_ddvalue())
         }
     }
 }
@@ -1972,13 +1975,13 @@ pub fn indexes2arrid(idx: Indexes) -> ArrId {
 #[derive(Copy,Clone,Debug,PartialEq,Eq,Hash)]
 pub enum Relations {
     __Null = 0,
-    agent_LSPConfig = 1,
-    agent_RealizedAddress = 2,
-    agent_SnoopedAddress = 3,
-    controller_EffectiveAddress = 4,
-    controller_LSPConfig = 5,
-    controller_LogicalSwitchPort = 6,
-    controller_RealizedAddress = 7
+    agent_OutSnoopedAddress = 1,
+    agent_SnoopedAddress = 2,
+    controller_EffectiveAddress = 3,
+    controller_LSPConfig = 4,
+    controller_LogicalSwitchPort = 5,
+    controller_RealizedAddress = 6,
+    controller_SnoopedAddress = 7
 }
 #[derive(Copy,Clone,Debug,PartialEq,Eq,Hash)]
 pub enum Indexes {
@@ -2128,45 +2131,25 @@ pub mod Value
     //#[typetag::serde]
     decl_ddval_convert!{__Tuple2____Bitval64___Tuple2____Bitval64___Stringval}
     #[derive(Default, Eq, Ord, Clone, Hash, PartialEq, PartialOrd, Serialize, Deserialize, Debug)]
-    pub struct __agent_LSPConfig (pub agent_LSPConfig);
-    impl abomonation::Abomonation for __agent_LSPConfig {}
-    impl fmt::Display for __agent_LSPConfig {
-        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-            fmt::Debug::fmt(&self.0, f)
-        }
-    }
-    impl record::IntoRecord for __agent_LSPConfig {
-        fn into_record(self) -> record::Record {
-            self.0.into_record()
-        }
-    }
-    impl record::Mutator<__agent_LSPConfig> for record::Record {
-        fn mutate(&self, v: &mut __agent_LSPConfig ) -> result::Result<(), std::string::String> {
-            self.mutate(&mut v.0)
-        }
-    }
-    //#[typetag::serde]
-    decl_ddval_convert!{__agent_LSPConfig}
-    #[derive(Default, Eq, Ord, Clone, Hash, PartialEq, PartialOrd, Serialize, Deserialize, Debug)]
-    pub struct __agent_RealizedAddress (pub agent_RealizedAddress);
-    impl abomonation::Abomonation for __agent_RealizedAddress {}
-    impl fmt::Display for __agent_RealizedAddress {
+    pub struct __agent_OutSnoopedAddress (pub agent_OutSnoopedAddress);
+    impl abomonation::Abomonation for __agent_OutSnoopedAddress {}
+    impl fmt::Display for __agent_OutSnoopedAddress {
         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
             fmt::Debug::fmt(&self.0, f)
         }
     }
-    impl record::IntoRecord for __agent_RealizedAddress {
+    impl record::IntoRecord for __agent_OutSnoopedAddress {
         fn into_record(self) -> record::Record {
             self.0.into_record()
         }
     }
-    impl record::Mutator<__agent_RealizedAddress> for record::Record {
-        fn mutate(&self, v: &mut __agent_RealizedAddress ) -> result::Result<(), std::string::String> {
+    impl record::Mutator<__agent_OutSnoopedAddress> for record::Record {
+        fn mutate(&self, v: &mut __agent_OutSnoopedAddress ) -> result::Result<(), std::string::String> {
             self.mutate(&mut v.0)
         }
     }
     //#[typetag::serde]
-    decl_ddval_convert!{__agent_RealizedAddress}
+    decl_ddval_convert!{__agent_OutSnoopedAddress}
     #[derive(Default, Eq, Ord, Clone, Hash, PartialEq, PartialOrd, Serialize, Deserialize, Debug)]
     pub struct __agent_SnoopedAddress (pub agent_SnoopedAddress);
     impl abomonation::Abomonation for __agent_SnoopedAddress {}
@@ -2267,6 +2250,26 @@ pub mod Value
     }
     //#[typetag::serde]
     decl_ddval_convert!{__controller_RealizedAddress}
+    #[derive(Default, Eq, Ord, Clone, Hash, PartialEq, PartialOrd, Serialize, Deserialize, Debug)]
+    pub struct __controller_SnoopedAddress (pub controller_SnoopedAddress);
+    impl abomonation::Abomonation for __controller_SnoopedAddress {}
+    impl fmt::Display for __controller_SnoopedAddress {
+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
+            fmt::Debug::fmt(&self.0, f)
+        }
+    }
+    impl record::IntoRecord for __controller_SnoopedAddress {
+        fn into_record(self) -> record::Record {
+            self.0.into_record()
+        }
+    }
+    impl record::Mutator<__controller_SnoopedAddress> for record::Record {
+        fn mutate(&self, v: &mut __controller_SnoopedAddress ) -> result::Result<(), std::string::String> {
+            self.mutate(&mut v.0)
+        }
+    }
+    //#[typetag::serde]
+    decl_ddval_convert!{__controller_SnoopedAddress}
 }
 /* fn log_log(module: & log_module_t, level: & log_log_level_t, msg: & String) -> bool */
 /* fn std___builtin_2string<X: Val>(x: & X) -> String */
@@ -2392,43 +2395,6 @@ pub fn prog(__update_cb: Box<dyn CBFn>) -> Program {
                          }],
                      change_cb:    None
                  };
-    let agent_LSPConfig = Relation {
-                              name:         "agent.LSPConfig".to_string(),
-                              input:        true,
-                              distinct:     false,
-                              key_func:     None,
-                              id:           Relations::agent_LSPConfig as RelId,
-                              rules:        vec![
-                                  ],
-                              arrangements: vec![
-                                  Arrangement::Map{
-                                     name: r###"agent.LSPConfig{.lsp=_0, .tofu=false}"###.to_string(),
-                                      afun: &{fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
-                                      {
-                                          let __cloned = __v.clone();
-                                          match unsafe { Value::__agent_LSPConfig::from_ddvalue(__v) }.0 {
-                                              agent_LSPConfig{lsp: ref _0, tofu: false} => Some(Value::__Bitval64(_0.clone()).into_ddvalue()),
-                                              _ => None
-                                          }.map(|x|(x,__cloned))
-                                      }
-                                      __f},
-                                      queryable: false
-                                  },
-                                  Arrangement::Map{
-                                     name: r###"agent.LSPConfig{.lsp=_0, .tofu=true}"###.to_string(),
-                                      afun: &{fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
-                                      {
-                                          let __cloned = __v.clone();
-                                          match unsafe { Value::__agent_LSPConfig::from_ddvalue(__v) }.0 {
-                                              agent_LSPConfig{lsp: ref _0, tofu: true} => Some(Value::__Bitval64(_0.clone()).into_ddvalue()),
-                                              _ => None
-                                          }.map(|x|(x,__cloned))
-                                      }
-                                      __f},
-                                      queryable: false
-                                  }],
-                              change_cb:    None
-                          };
     let agent_SnoopedAddress = Relation {
                                    name:         "agent.SnoopedAddress".to_string(),
                                    input:        true,
@@ -2438,148 +2404,38 @@ pub fn prog(__update_cb: Box<dyn CBFn>) -> Program {
                                    rules:        vec![
                                        ],
                                    arrangements: vec![
-                                       Arrangement::Map{
-                                          name: r###"agent.SnoopedAddress{.lsp=_0, .ip=_, .timestamp=_}"###.to_string(),
-                                           afun: &{fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
-                                           {
-                                               let __cloned = __v.clone();
-                                               match unsafe { Value::__agent_SnoopedAddress::from_ddvalue(__v) }.0 {
-                                                   agent_SnoopedAddress{lsp: ref _0, ip: _, timestamp: _} => Some(Value::__Bitval64(_0.clone()).into_ddvalue()),
-                                                   _ => None
-                                               }.map(|x|(x,__cloned))
-                                           }
-                                           __f},
-                                           queryable: false
-                                       }],
+                                       ],
                                    change_cb:    None
                                };
-    let agent_RealizedAddress = Relation {
-                                    name:         "agent.RealizedAddress".to_string(),
-                                    input:        false,
-                                    distinct:     true,
-                                    key_func:     None,
-                                    id:           Relations::agent_RealizedAddress as RelId,
-                                    rules:        vec![
-                                        /* agent.RealizedAddress(.lsp=lsp, .timestamp=newest.0, .ip=newest.1) :- agent.LSPConfig(.lsp=lsp, .tofu=false), agent.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var newest = Aggregate((lsp), std.group_max((ts, ip))). */
-                                        Rule::ArrangementRule {
-                                            description: "agent.RealizedAddress(.lsp=lsp, .timestamp=newest.0, .ip=newest.1) :- agent.LSPConfig(.lsp=lsp, .tofu=false), agent.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var newest = Aggregate((lsp), std.group_max((ts, ip))).".to_string(),
-                                            arr: ( Relations::agent_LSPConfig as RelId, 0),
-                                            xform: XFormArrangement::Join{
-                                                       description: "agent.LSPConfig(.lsp=lsp, .tofu=false), agent.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts)".to_string(),
-                                                       ffun: None,
-                                                       arrangement: (Relations::agent_SnoopedAddress as RelId,0),
-                                                       jfun: &{fn __f(_: &DDValue ,__v1: &DDValue,__v2: &DDValue) -> Option<DDValue>
-                                                       {
-                                                           let lsp = match unsafe {  Value::__agent_LSPConfig::from_ddvalue_ref(__v1) }.0 {
-                                                               agent_LSPConfig{lsp: ref lsp, tofu: false} => lsp,
-                                                               _ => return None
-                                                           };
-                                                           let (ip, ts) = match unsafe {  Value::__agent_SnoopedAddress::from_ddvalue_ref(__v2) }.0 {
-                                                               agent_SnoopedAddress{lsp: _, ip: ref ip, timestamp: ref ts} => (ip, ts),
-                                                               _ => return None
-                                                           };
-                                                           Some(Value::__Tuple3____Stringval___Bitval64___Bitval64((ip.clone(), lsp.clone(), ts.clone())).into_ddvalue())
-                                                       }
-                                                       __f},
-                                                       next: Box::new(Some(XFormCollection::Arrange {
-                                                                               description: "arrange agent.LSPConfig(.lsp=lsp, .tofu=false), agent.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts) by (lsp)" .to_string(),
-                                                                               afun: &{fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
-                                                                               {
-                                                                                   let (ref ip, ref lsp, ref ts) = unsafe { Value::__Tuple3____Stringval___Bitval64___Bitval64::from_ddvalue_ref( &__v ) }.0;
-                                                                                   Some((Value::__Bitval64(lsp.clone()).into_ddvalue(), Value::__Tuple3____Stringval___Bitval64___Bitval64((ip.clone(), lsp.clone(), ts.clone())).into_ddvalue()))
-                                                                               }
-                                                                               __f},
-                                                                               next: Box::new(XFormArrangement::Aggregate{
-                                                                                                  description: "agent.LSPConfig(.lsp=lsp, .tofu=false), agent.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var newest = Aggregate((lsp), std.group_max((ts, ip)))".to_string(),
-                                                                                                  ffun: None,
-                                                                                                  aggfun: &{fn __f(__key: &DDValue, __group__: &[(&DDValue, Weight)]) -> DDValue
-                                                                                              {
-                                                                                                  let ref lsp = unsafe { Value::__Bitval64::from_ddvalue_ref( __key ) }.0;
-                                                                                                  let newest = std_group_max::<(common_time_t, common_ipaddr_t)>(&std_Group::new(__group__, &{fn __f(__v: &DDValue) ->  (common_time_t, common_ipaddr_t)
-                                                                                                                                                                                            {
-                                                                                                                                                                                                let (ref ip, ref lsp, ref ts) = unsafe { Value::__Tuple3____Stringval___Bitval64___Bitval64::from_ddvalue_ref( __v ) }.0;
-                                                                                                                                                                                                (ts.clone(), ip.clone())
-                                                                                                                                                                                            }
-                                                                                                                                                                                            __f}));
-                                                                                                  Value::__Tuple2____Bitval64___Tuple2____Bitval64___Stringval((lsp.clone(), newest.clone())).into_ddvalue()
-                                                                                              }
-                                                                                              __f},
-                                                                                                  next: Box::new(Some(XFormCollection::FilterMap{
-                                                                                                                          description: "head of agent.RealizedAddress(.lsp=lsp, .timestamp=newest.0, .ip=newest.1) :- agent.LSPConfig(.lsp=lsp, .tofu=false), agent.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var newest = Aggregate((lsp), std.group_max((ts, ip)))." .to_string(),
-                                                                                                                          fmfun: &{fn __f(__v: DDValue) -> Option<DDValue>
-                                                                                                                          {
-                                                                                                                              let (ref lsp, ref newest) = unsafe { Value::__Tuple2____Bitval64___Tuple2____Bitval64___Stringval::from_ddvalue_ref( &__v ) }.0;
-                                                                                                                              Some(Value::__agent_RealizedAddress(agent_RealizedAddress{lsp: lsp.clone(), timestamp: (newest.0).clone(), ip: (newest.1).clone()}).into_ddvalue())
-                                                                                                                          }
-                                                                                                                          __f},
-                                                                                                                          next: Box::new(None)
-                                                                                                                      }))
-                                                                                              })
-                                                                           }))
-                                                   }
-                                        },
-                                        /* agent.RealizedAddress(.lsp=lsp, .timestamp=oldest.0, .ip=oldest.1) :- agent.LSPConfig(.lsp=lsp, .tofu=true), agent.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var oldest = Aggregate((lsp), std.group_min((ts, ip))). */
-                                        Rule::ArrangementRule {
-                                            description: "agent.RealizedAddress(.lsp=lsp, .timestamp=oldest.0, .ip=oldest.1) :- agent.LSPConfig(.lsp=lsp, .tofu=true), agent.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var oldest = Aggregate((lsp), std.group_min((ts, ip))).".to_string(),
-                                            arr: ( Relations::agent_LSPConfig as RelId, 1),
-                                            xform: XFormArrangement::Join{
-                                                       description: "agent.LSPConfig(.lsp=lsp, .tofu=true), agent.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts)".to_string(),
-                                                       ffun: None,
-                                                       arrangement: (Relations::agent_SnoopedAddress as RelId,0),
-                                                       jfun: &{fn __f(_: &DDValue ,__v1: &DDValue,__v2: &DDValue) -> Option<DDValue>
-                                                       {
-                                                           let lsp = match unsafe {  Value::__agent_LSPConfig::from_ddvalue_ref(__v1) }.0 {
-                                                               agent_LSPConfig{lsp: ref lsp, tofu: true} => lsp,
-                                                               _ => return None
-                                                           };
-                                                           let (ip, ts) = match unsafe {  Value::__agent_SnoopedAddress::from_ddvalue_ref(__v2) }.0 {
-                                                               agent_SnoopedAddress{lsp: _, ip: ref ip, timestamp: ref ts} => (ip, ts),
-                                                               _ => return None
-                                                           };
-                                                           Some(Value::__Tuple3____Stringval___Bitval64___Bitval64((ip.clone(), lsp.clone(), ts.clone())).into_ddvalue())
-                                                       }
-                                                       __f},
-                                                       next: Box::new(Some(XFormCollection::Arrange {
-                                                                               description: "arrange agent.LSPConfig(.lsp=lsp, .tofu=true), agent.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts) by (lsp)" .to_string(),
-                                                                               afun: &{fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
-                                                                               {
-                                                                                   let (ref ip, ref lsp, ref ts) = unsafe { Value::__Tuple3____Stringval___Bitval64___Bitval64::from_ddvalue_ref( &__v ) }.0;
-                                                                                   Some((Value::__Bitval64(lsp.clone()).into_ddvalue(), Value::__Tuple3____Stringval___Bitval64___Bitval64((ip.clone(), lsp.clone(), ts.clone())).into_ddvalue()))
-                                                                               }
-                                                                               __f},
-                                                                               next: Box::new(XFormArrangement::Aggregate{
-                                                                                                  description: "agent.LSPConfig(.lsp=lsp, .tofu=true), agent.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var oldest = Aggregate((lsp), std.group_min((ts, ip)))".to_string(),
-                                                                                                  ffun: None,
-                                                                                                  aggfun: &{fn __f(__key: &DDValue, __group__: &[(&DDValue, Weight)]) -> DDValue
-                                                                                              {
-                                                                                                  let ref lsp = unsafe { Value::__Bitval64::from_ddvalue_ref( __key ) }.0;
-                                                                                                  let oldest = std_group_min::<(common_time_t, common_ipaddr_t)>(&std_Group::new(__group__, &{fn __f(__v: &DDValue) ->  (common_time_t, common_ipaddr_t)
-                                                                                                                                                                                            {
-                                                                                                                                                                                                let (ref ip, ref lsp, ref ts) = unsafe { Value::__Tuple3____Stringval___Bitval64___Bitval64::from_ddvalue_ref( __v ) }.0;
-                                                                                                                                                                                                (ts.clone(), ip.clone())
-                                                                                                                                                                                            }
-                                                                                                                                                                                            __f}));
-                                                                                                  Value::__Tuple2____Bitval64___Tuple2____Bitval64___Stringval((lsp.clone(), oldest.clone())).into_ddvalue()
-                                                                                              }
-                                                                                              __f},
-                                                                                                  next: Box::new(Some(XFormCollection::FilterMap{
-                                                                                                                          description: "head of agent.RealizedAddress(.lsp=lsp, .timestamp=oldest.0, .ip=oldest.1) :- agent.LSPConfig(.lsp=lsp, .tofu=true), agent.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var oldest = Aggregate((lsp), std.group_min((ts, ip)))." .to_string(),
-                                                                                                                          fmfun: &{fn __f(__v: DDValue) -> Option<DDValue>
-                                                                                                                          {
-                                                                                                                              let (ref lsp, ref oldest) = unsafe { Value::__Tuple2____Bitval64___Tuple2____Bitval64___Stringval::from_ddvalue_ref( &__v ) }.0;
-                                                                                                                              Some(Value::__agent_RealizedAddress(agent_RealizedAddress{lsp: lsp.clone(), timestamp: (oldest.0).clone(), ip: (oldest.1).clone()}).into_ddvalue())
-                                                                                                                          }
-                                                                                                                          __f},
-                                                                                                                          next: Box::new(None)
-                                                                                                                      }))
-                                                                                              })
-                                                                           }))
-                                                   }
-                                        }],
-                                    arrangements: vec![
-                                        ],
-                                    change_cb:    Some(sync::Arc::new(sync::Mutex::new(__update_cb.clone())))
-                                };
+    let agent_OutSnoopedAddress = Relation {
+                                      name:         "agent.OutSnoopedAddress".to_string(),
+                                      input:        false,
+                                      distinct:     false,
+                                      key_func:     None,
+                                      id:           Relations::agent_OutSnoopedAddress as RelId,
+                                      rules:        vec![
+                                          /* agent.OutSnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=timestamp) :- agent.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=timestamp). */
+                                          Rule::CollectionRule {
+                                              description: "agent.OutSnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=timestamp) :- agent.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=timestamp).".to_string(),
+                                              rel: Relations::agent_SnoopedAddress as RelId,
+                                              xform: Some(XFormCollection::FilterMap{
+                                                              description: "head of agent.OutSnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=timestamp) :- agent.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=timestamp)." .to_string(),
+                                                              fmfun: &{fn __f(__v: DDValue) -> Option<DDValue>
+                                                              {
+                                                                  let (lsp, ip, timestamp) = match unsafe {  Value::__agent_SnoopedAddress::from_ddvalue_ref(&__v) }.0 {
+                                                                      agent_SnoopedAddress{lsp: ref lsp, ip: ref ip, timestamp: ref timestamp} => (lsp, ip, timestamp),
+                                                                      _ => return None
+                                                                  };
+                                                                  Some(Value::__agent_OutSnoopedAddress(agent_OutSnoopedAddress{lsp: lsp.clone(), ip: ip.clone(), timestamp: timestamp.clone()}).into_ddvalue())
+                                                              }
+                                                              __f},
+                                                              next: Box::new(None)
+                                                          })
+                                          }],
+                                      arrangements: vec![
+                                          ],
+                                      change_cb:    Some(sync::Arc::new(sync::Mutex::new(__update_cb.clone())))
+                                  };
     let controller_LogicalSwitchPort = Relation {
                                            name:         "controller.LogicalSwitchPort".to_string(),
                                            input:        true,
@@ -2630,17 +2486,181 @@ pub fn prog(__update_cb: Box<dyn CBFn>) -> Program {
                                                        })
                                        }],
                                    arrangements: vec![
-                                       ],
+                                       Arrangement::Map{
+                                          name: r###"controller.LSPConfig{.lsp=_0, .tofu=false}"###.to_string(),
+                                           afun: &{fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
+                                           {
+                                               let __cloned = __v.clone();
+                                               match unsafe { Value::__controller_LSPConfig::from_ddvalue(__v) }.0 {
+                                                   controller_LSPConfig{lsp: ref _0, tofu: false} => Some(Value::__Bitval64(_0.clone()).into_ddvalue()),
+                                                   _ => None
+                                               }.map(|x|(x,__cloned))
+                                           }
+                                           __f},
+                                           queryable: false
+                                       },
+                                       Arrangement::Map{
+                                          name: r###"controller.LSPConfig{.lsp=_0, .tofu=true}"###.to_string(),
+                                           afun: &{fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
+                                           {
+                                               let __cloned = __v.clone();
+                                               match unsafe { Value::__controller_LSPConfig::from_ddvalue(__v) }.0 {
+                                                   controller_LSPConfig{lsp: ref _0, tofu: true} => Some(Value::__Bitval64(_0.clone()).into_ddvalue()),
+                                                   _ => None
+                                               }.map(|x|(x,__cloned))
+                                           }
+                                           __f},
+                                           queryable: false
+                                       }],
                                    change_cb:    Some(sync::Arc::new(sync::Mutex::new(__update_cb.clone())))
                                };
+    let controller_SnoopedAddress = Relation {
+                                        name:         "controller.SnoopedAddress".to_string(),
+                                        input:        true,
+                                        distinct:     false,
+                                        key_func:     None,
+                                        id:           Relations::controller_SnoopedAddress as RelId,
+                                        rules:        vec![
+                                            ],
+                                        arrangements: vec![
+                                            Arrangement::Map{
+                                               name: r###"controller.SnoopedAddress{.lsp=_0, .ip=_, .timestamp=_}"###.to_string(),
+                                                afun: &{fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
+                                                {
+                                                    let __cloned = __v.clone();
+                                                    match unsafe { Value::__controller_SnoopedAddress::from_ddvalue(__v) }.0 {
+                                                        controller_SnoopedAddress{lsp: ref _0, ip: _, timestamp: _} => Some(Value::__Bitval64(_0.clone()).into_ddvalue()),
+                                                        _ => None
+                                                    }.map(|x|(x,__cloned))
+                                                }
+                                                __f},
+                                                queryable: false
+                                            }],
+                                        change_cb:    None
+                                    };
     let controller_RealizedAddress = Relation {
                                          name:         "controller.RealizedAddress".to_string(),
-                                         input:        true,
-                                         distinct:     false,
+                                         input:        false,
+                                         distinct:     true,
                                          key_func:     None,
                                          id:           Relations::controller_RealizedAddress as RelId,
                                          rules:        vec![
-                                             ],
+                                             /* controller.RealizedAddress(.lsp=lsp, .timestamp=newest.0, .ip=newest.1) :- controller.LSPConfig(.lsp=lsp, .tofu=false), controller.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var newest = Aggregate((lsp), std.group_max((ts, ip))). */
+                                             Rule::ArrangementRule {
+                                                 description: "controller.RealizedAddress(.lsp=lsp, .timestamp=newest.0, .ip=newest.1) :- controller.LSPConfig(.lsp=lsp, .tofu=false), controller.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var newest = Aggregate((lsp), std.group_max((ts, ip))).".to_string(),
+                                                 arr: ( Relations::controller_LSPConfig as RelId, 0),
+                                                 xform: XFormArrangement::Join{
+                                                            description: "controller.LSPConfig(.lsp=lsp, .tofu=false), controller.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts)".to_string(),
+                                                            ffun: None,
+                                                            arrangement: (Relations::controller_SnoopedAddress as RelId,0),
+                                                            jfun: &{fn __f(_: &DDValue ,__v1: &DDValue,__v2: &DDValue) -> Option<DDValue>
+                                                            {
+                                                                let lsp = match unsafe {  Value::__controller_LSPConfig::from_ddvalue_ref(__v1) }.0 {
+                                                                    controller_LSPConfig{lsp: ref lsp, tofu: false} => lsp,
+                                                                    _ => return None
+                                                                };
+                                                                let (ip, ts) = match unsafe {  Value::__controller_SnoopedAddress::from_ddvalue_ref(__v2) }.0 {
+                                                                    controller_SnoopedAddress{lsp: _, ip: ref ip, timestamp: ref ts} => (ip, ts),
+                                                                    _ => return None
+                                                                };
+                                                                Some(Value::__Tuple3____Stringval___Bitval64___Bitval64((ip.clone(), lsp.clone(), ts.clone())).into_ddvalue())
+                                                            }
+                                                            __f},
+                                                            next: Box::new(Some(XFormCollection::Arrange {
+                                                                                    description: "arrange controller.LSPConfig(.lsp=lsp, .tofu=false), controller.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts) by (lsp)" .to_string(),
+                                                                                    afun: &{fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
+                                                                                    {
+                                                                                        let (ref ip, ref lsp, ref ts) = unsafe { Value::__Tuple3____Stringval___Bitval64___Bitval64::from_ddvalue_ref( &__v ) }.0;
+                                                                                        Some((Value::__Bitval64(lsp.clone()).into_ddvalue(), Value::__Tuple3____Stringval___Bitval64___Bitval64((ip.clone(), lsp.clone(), ts.clone())).into_ddvalue()))
+                                                                                    }
+                                                                                    __f},
+                                                                                    next: Box::new(XFormArrangement::Aggregate{
+                                                                                                       description: "controller.LSPConfig(.lsp=lsp, .tofu=false), controller.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var newest = Aggregate((lsp), std.group_max((ts, ip)))".to_string(),
+                                                                                                       ffun: None,
+                                                                                                       aggfun: &{fn __f(__key: &DDValue, __group__: &[(&DDValue, Weight)]) -> DDValue
+                                                                                                   {
+                                                                                                       let ref lsp = unsafe { Value::__Bitval64::from_ddvalue_ref( __key ) }.0;
+                                                                                                       let newest = std_group_max::<(common_time_t, common_ipaddr_t)>(&std_Group::new(__group__, &{fn __f(__v: &DDValue) ->  (common_time_t, common_ipaddr_t)
+                                                                                                                                                                                                 {
+                                                                                                                                                                                                     let (ref ip, ref lsp, ref ts) = unsafe { Value::__Tuple3____Stringval___Bitval64___Bitval64::from_ddvalue_ref( __v ) }.0;
+                                                                                                                                                                                                     (ts.clone(), ip.clone())
+                                                                                                                                                                                                 }
+                                                                                                                                                                                                 __f}));
+                                                                                                       Value::__Tuple2____Bitval64___Tuple2____Bitval64___Stringval((lsp.clone(), newest.clone())).into_ddvalue()
+                                                                                                   }
+                                                                                                   __f},
+                                                                                                       next: Box::new(Some(XFormCollection::FilterMap{
+                                                                                                                               description: "head of controller.RealizedAddress(.lsp=lsp, .timestamp=newest.0, .ip=newest.1) :- controller.LSPConfig(.lsp=lsp, .tofu=false), controller.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var newest = Aggregate((lsp), std.group_max((ts, ip)))." .to_string(),
+                                                                                                                               fmfun: &{fn __f(__v: DDValue) -> Option<DDValue>
+                                                                                                                               {
+                                                                                                                                   let (ref lsp, ref newest) = unsafe { Value::__Tuple2____Bitval64___Tuple2____Bitval64___Stringval::from_ddvalue_ref( &__v ) }.0;
+                                                                                                                                   Some(Value::__controller_RealizedAddress(controller_RealizedAddress{lsp: lsp.clone(), timestamp: (newest.0).clone(), ip: (newest.1).clone()}).into_ddvalue())
+                                                                                                                               }
+                                                                                                                               __f},
+                                                                                                                               next: Box::new(None)
+                                                                                                                           }))
+                                                                                                   })
+                                                                                }))
+                                                        }
+                                             },
+                                             /* controller.RealizedAddress(.lsp=lsp, .timestamp=oldest.0, .ip=oldest.1) :- controller.LSPConfig(.lsp=lsp, .tofu=true), controller.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var oldest = Aggregate((lsp), std.group_min((ts, ip))). */
+                                             Rule::ArrangementRule {
+                                                 description: "controller.RealizedAddress(.lsp=lsp, .timestamp=oldest.0, .ip=oldest.1) :- controller.LSPConfig(.lsp=lsp, .tofu=true), controller.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var oldest = Aggregate((lsp), std.group_min((ts, ip))).".to_string(),
+                                                 arr: ( Relations::controller_LSPConfig as RelId, 1),
+                                                 xform: XFormArrangement::Join{
+                                                            description: "controller.LSPConfig(.lsp=lsp, .tofu=true), controller.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts)".to_string(),
+                                                            ffun: None,
+                                                            arrangement: (Relations::controller_SnoopedAddress as RelId,0),
+                                                            jfun: &{fn __f(_: &DDValue ,__v1: &DDValue,__v2: &DDValue) -> Option<DDValue>
+                                                            {
+                                                                let lsp = match unsafe {  Value::__controller_LSPConfig::from_ddvalue_ref(__v1) }.0 {
+                                                                    controller_LSPConfig{lsp: ref lsp, tofu: true} => lsp,
+                                                                    _ => return None
+                                                                };
+                                                                let (ip, ts) = match unsafe {  Value::__controller_SnoopedAddress::from_ddvalue_ref(__v2) }.0 {
+                                                                    controller_SnoopedAddress{lsp: _, ip: ref ip, timestamp: ref ts} => (ip, ts),
+                                                                    _ => return None
+                                                                };
+                                                                Some(Value::__Tuple3____Stringval___Bitval64___Bitval64((ip.clone(), lsp.clone(), ts.clone())).into_ddvalue())
+                                                            }
+                                                            __f},
+                                                            next: Box::new(Some(XFormCollection::Arrange {
+                                                                                    description: "arrange controller.LSPConfig(.lsp=lsp, .tofu=true), controller.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts) by (lsp)" .to_string(),
+                                                                                    afun: &{fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
+                                                                                    {
+                                                                                        let (ref ip, ref lsp, ref ts) = unsafe { Value::__Tuple3____Stringval___Bitval64___Bitval64::from_ddvalue_ref( &__v ) }.0;
+                                                                                        Some((Value::__Bitval64(lsp.clone()).into_ddvalue(), Value::__Tuple3____Stringval___Bitval64___Bitval64((ip.clone(), lsp.clone(), ts.clone())).into_ddvalue()))
+                                                                                    }
+                                                                                    __f},
+                                                                                    next: Box::new(XFormArrangement::Aggregate{
+                                                                                                       description: "controller.LSPConfig(.lsp=lsp, .tofu=true), controller.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var oldest = Aggregate((lsp), std.group_min((ts, ip)))".to_string(),
+                                                                                                       ffun: None,
+                                                                                                       aggfun: &{fn __f(__key: &DDValue, __group__: &[(&DDValue, Weight)]) -> DDValue
+                                                                                                   {
+                                                                                                       let ref lsp = unsafe { Value::__Bitval64::from_ddvalue_ref( __key ) }.0;
+                                                                                                       let oldest = std_group_min::<(common_time_t, common_ipaddr_t)>(&std_Group::new(__group__, &{fn __f(__v: &DDValue) ->  (common_time_t, common_ipaddr_t)
+                                                                                                                                                                                                 {
+                                                                                                                                                                                                     let (ref ip, ref lsp, ref ts) = unsafe { Value::__Tuple3____Stringval___Bitval64___Bitval64::from_ddvalue_ref( __v ) }.0;
+                                                                                                                                                                                                     (ts.clone(), ip.clone())
+                                                                                                                                                                                                 }
+                                                                                                                                                                                                 __f}));
+                                                                                                       Value::__Tuple2____Bitval64___Tuple2____Bitval64___Stringval((lsp.clone(), oldest.clone())).into_ddvalue()
+                                                                                                   }
+                                                                                                   __f},
+                                                                                                       next: Box::new(Some(XFormCollection::FilterMap{
+                                                                                                                               description: "head of controller.RealizedAddress(.lsp=lsp, .timestamp=oldest.0, .ip=oldest.1) :- controller.LSPConfig(.lsp=lsp, .tofu=true), controller.SnoopedAddress(.lsp=lsp, .ip=ip, .timestamp=ts), var oldest = Aggregate((lsp), std.group_min((ts, ip)))." .to_string(),
+                                                                                                                               fmfun: &{fn __f(__v: DDValue) -> Option<DDValue>
+                                                                                                                               {
+                                                                                                                                   let (ref lsp, ref oldest) = unsafe { Value::__Tuple2____Bitval64___Tuple2____Bitval64___Stringval::from_ddvalue_ref( &__v ) }.0;
+                                                                                                                                   Some(Value::__controller_RealizedAddress(controller_RealizedAddress{lsp: lsp.clone(), timestamp: (oldest.0).clone(), ip: (oldest.1).clone()}).into_ddvalue())
+                                                                                                                               }
+                                                                                                                               __f},
+                                                                                                                               next: Box::new(None)
+                                                                                                                           }))
+                                                                                                   })
+                                                                                }))
+                                                        }
+                                             }],
                                          arrangements: vec![
                                              Arrangement::Map{
                                                 name: r###"controller.RealizedAddress{.lsp=_0, .timestamp=_, .ip=_}"###.to_string(),
@@ -2655,7 +2675,7 @@ pub fn prog(__update_cb: Box<dyn CBFn>) -> Program {
                                                  __f},
                                                  queryable: false
                                              }],
-                                         change_cb:    None
+                                         change_cb:    Some(sync::Arc::new(sync::Mutex::new(__update_cb.clone())))
                                      };
     let controller_EffectiveAddress = Relation {
                                           name:         "controller.EffectiveAddress".to_string(),
@@ -2730,11 +2750,11 @@ pub fn prog(__update_cb: Box<dyn CBFn>) -> Program {
     Program {
         nodes: vec![
             ProgNode::Rel{rel: __Null},
-            ProgNode::Rel{rel: agent_LSPConfig},
             ProgNode::Rel{rel: agent_SnoopedAddress},
-            ProgNode::Rel{rel: agent_RealizedAddress},
+            ProgNode::Rel{rel: agent_OutSnoopedAddress},
             ProgNode::Rel{rel: controller_LogicalSwitchPort},
             ProgNode::Rel{rel: controller_LSPConfig},
+            ProgNode::Rel{rel: controller_SnoopedAddress},
             ProgNode::Rel{rel: controller_RealizedAddress},
             ProgNode::Rel{rel: controller_EffectiveAddress}
         ],
